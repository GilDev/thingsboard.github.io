<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Valeriia Koriavikova &#8211; ThingsBoard&#039;s blog</title>
	<atom:link href="/blog/author/valeriia-koriavikova/feed/" rel="self" type="application/rss+xml" />
	<link>/blog/</link>
	<description></description>
	<lastBuildDate>Mon, 08 Apr 2024 10:21:52 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>
	<item>
		<title>Building a Smart Parking Mobile App with ThingsBoard and Stripe Integration</title>
		<link>/blog/building-a-smart-parking-mobile-app-with-thingsboard-and-stripe-integration/</link>
					<comments>/blog/building-a-smart-parking-mobile-app-with-thingsboard-and-stripe-integration/#respond</comments>
		
		<dc:creator><![CDATA[Valeriia Koriavikova]]></dc:creator>
		<pubDate>Mon, 08 Apr 2024 10:12:45 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://wp.thingsboard.io/?p=4069</guid>

					<description><![CDATA[In today&#8217;s fast-paced world, the convenience of smart parking solutions can&#8217;t be overstated. In this article, we’ll explore&#8230;]]></description>
										<content:encoded><![CDATA[
<p style="font-size:16px">In today&#8217;s fast-paced world, the convenience of smart parking solutions can&#8217;t be overstated. In this article, we’ll explore how to build a user-friendly Mobile Parking application using ThingsBoard, an IoT platform, and integrate it with Stripe for seamless online payments.</p>



<h4 class="wp-block-heading">1. Concept Overview:</h4>



<p style="font-size:16px">The mobile app aims to simplify the parking experience. It allows users to find available parking spots, start and end parking sessions, and handle payments &#8211; all without leaving their cars. Key features include real-time parking availability, cost information, parking history, and the ability to delay payment with a reminder system.</p>



<h4 class="wp-block-heading">2. Stripe Integration:</h4>



<p style="font-size:16px">We chose Stripe as our payment system because of its robust features and ease of integration. While Stripe serves as an example, the principles outlined can apply to other payment systems, depending on your specific needs.</p>



<p style="font-size:16px">Firstly, you need to create an account on Stripe. Then, on the Thingsboard side, implement a custom endpoint to generate payment links. Once the price for parking is calculated, use specific methods of the Stripe extension in Java to create a payment on Stripe. Then, get a link from the created payment to forward the end user to the payment page.</p>



<p style="font-size:16px">After that, create another custom endpoint for payment confirmation on the Thingsboard side and add this endpoint to the Stripe as a webhook. Once the end user enters payment details and clicks the pay button, Stripe will trigger Thingsboard to update the payment status as confirmed or failed.</p>



<h4 class="wp-block-heading">3. User Capabilities:</h4>



<p style="font-size:16px">With this app, users can:</p>



<ul>
<li style="font-size:16px">Locate their position and nearby available parking spots</li>



<li style="font-size:16px">Start and end parking sessions</li>



<li style="font-size:16px">View and pay parking charges, either immediately or later</li>



<li style="font-size:16px">Receive notifications for unpaid parking charges</li>



<li style="font-size:16px">Track and analyze their parking history and expenses</li>
</ul>



<h4 class="wp-block-heading">4. System Hierarchy:</h4>



<p style="font-size:16px">In our solution, the hierarchy is very basic: we have Assets as Parking spots and self-registered Users who will use our application for parking.&nbsp;</p>



<p style="font-size:16px">Parking spots have geofencing zones and colored markers on a map that identify their occupancy.&nbsp;</p>



<p style="font-size:16px">Users will be able to see their location on the map with a car marker, so each user corresponds to one car on the map.</p>



<p style="font-size:16px">Payment information will be saved as JSON telemetry on both parking spot and user entities and will include information about the start and end of the parking period, total cost, link for payment, and payment status.</p>



<p style="font-size:16px">During the parking period, an additional custom relation should be created between the parking spot and the user. This relation should be removed after successful payment for parking services.</p>



<h4 class="wp-block-heading">5. Front-End (FE) Development:</h4>



<ul>
<li style="font-size:16px">Dashboard: Create a map showing parking spots and a telemetry table for parking history.
<ul>
<li>Parking spots are assets with the Asset Profile “Parking Spot”. The geofence attribute is “perimeter”, and coordinates have standard “longitude” and “latitude” names. Occupancy of the spot will be displayed as a zone and marker color: red &#8211; occupied, green &#8211; free spot</li>



<li>User’s parking history will be saved as telemetry data, so users will be able to trace their previous parking periods</li>
</ul>
</li>



<li style="font-size:16px">Widgets: Configure <a href="https://thingsboard.io/docs/mobile/mobile-actions/">mobile actions</a> for map interactions and historical data review.
<ul>
<li>Mobile actions to get the phone’s location that allows the user to set their current coordinates on a map, start/finish parking period by clicking on a parking spot on the map</li>



<li>Action for checking data from the parking record</li>
</ul>
</li>



<li style="font-size:16px">Geofences: Set up perimeters for parking lots and mark them on the map.
<ul>
<li>Parking spot perimeter set as geofencing polygon on a map</li>



<li>Perimeter color is based on spot occupancy</li>
</ul>
</li>



<li style="font-size:16px">User Interactions: Enable the tooltip for checking parking information.
<ul>
<li>Markers tooltips have additional information about parking spots, like occupancy, price, name, etc.</li>
</ul>
</li>
</ul>



<h4 class="wp-block-heading">6. Mobile Application Development:</h4>



<ul>
<li style="font-size:16px">User Authentication: Allow users to sign in or <a href="https://thingsboard.io/docs/pe/user-guide/self-registration/">sign up</a>.</li>



<li style="font-size:16px">Dashboards: <a href="https://thingsboard.io/docs/pe/mobile/customize-dashboards/">Customize mobile application</a> &#8211; set to a home page created dashboard</li>



<li style="font-size:16px">User Features:
<ul>
<li>Set the current location on a map to see the car marker</li>



<li>Check the history of parking periods on the telemetry table</li>



<li>Download the report of parking from the parking history table</li>
</ul>
</li>
</ul>



<h4 class="wp-block-heading">7. Back-End (BE) Development:</h4>



<ul>
<li style="font-size:16px">User Registration: Configure <a href="https://thingsboard.io/docs/paas/user-guide/self-registration/">self-registration</a> for new users. 
<ul>
<li>Assign the DNS record to your ThingsBoard IP address&nbsp;</li>



<li>Set up a mail server</li>



<li>Configure signup form</li>
</ul>
</li>



<li style="font-size:16px">Stripe Integration: Create a <a href="https://dashboard.stripe.com/">Stripe</a> account to integrate with Thingsboard. Verification of account is not required for this use case, and test mode can be used instead</li>



<li style="font-size:16px">Create a custom endpoint to save start parking time as a JSON telemetry on both parking spot and user entities</li>



<li style="font-size:16px">Create a custom endpoint to end parking, generate a link for payment using Stripe and update parking information in the Thingsboard</li>



<li style="font-size:16px">Create a custom endpoint for payment confirmation on the Thingsboard side, configure it, and add it as a webhook to Stripe</li>



<li style="font-size:16px">Notifications: Establish alarm logic and notification channels for reminders and confirmations:
<ul>
<li>Create a new rule chain with a Generator rule node, which will propagate messages to all parking lots every 5 minutes</li>



<li>Check parking spots using default Enrichment and Filter rule nodes. Create an alarm if a user has not finished paying for more than an hour</li>



<li>Notify users if needed via email, SMS, etc. You can use the Thingsboard <a href="https://thingsboard.io/docs/paas/user-guide/notifications/">notification center</a> or directly in the rule chain using default External rule nodes</li>
</ul>
</li>
</ul>



<h4 class="wp-block-heading">Conclusion:</h4>



<p style="font-size:16px">This smart parking solution demonstrates the versatility of ThingsBoard in IoT application development and showcases how integrating a payment system like Stripe can create a seamless and user-friendly experience. While this guide provides an overview, developers can adapt and expand upon these ideas to build more complex and tailored IoT solutions.</p>



<p style="font-size:16px">Remember, this is just a starting point. The IoT world is vast, and with ThingsBoard, your options are virtually limitless.&nbsp;</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/building-a-smart-parking-mobile-app-with-thingsboard-and-stripe-integration/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
